<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Static Upload Progress</title>
</head>
<body>
<script type="text/javascript">
	// The application path is the path to this page with the last 3 elements removed.
	var appPath = document.location.pathname.split('/').slice(0, -3).join('/');

	// This function can be reused as is.
	function RefreshWithAjax(uploadWindow, progressHandlerPath, postBackID, controlID, updateFunc, canCancel, updateDelayMs) {
		var timeoutId = null;
		var uploadStopper = canCancel ? StopUpload : null;
		SendRequest();

		function StopUpload() {
			var req = null;
			if (typeof (XMLHttpRequest) != 'undefined') {
				req = new XMLHttpRequest();
			} else {
				req = new ActiveXObject('MSXML2.XMLHTTP.3.0');
			}
			req.open('GET', progressHandlerPath + "?postBackID=" + postBackID + "&cancel=true");
			req.send(null);
		}

		function SendRequest() {
			var req = null;
			var startTime = (new Date()).getTime();
			if (typeof (XMLHttpRequest) != 'undefined') {
				req = new XMLHttpRequest();
			} else {
				req = new ActiveXObject('MSXML2.XMLHTTP.3.0');
			}
			req.onreadystatechange = HandleResponse;
			req.open('GET', progressHandlerPath + "?postBackID=" + postBackID + "&controlID=" + controlID);
			req.send(null);

			function HandleResponse() {
				if (typeof (req) != 'undefined' && req != null && req.readyState == 4 && req.status == 200) {
					var responseText = req.responseText;
					var uploadState = eval("(" + responseText + ")");
					updateFunc(uploadState, uploadStopper, responseText);
					if (!updateDelayMs) return;
					if (uploadState.Status == 'NormalInProgress' || uploadState.Status == 'ChunkedInProgress' || uploadState.Status == 'ProcessingInProgress' || uploadState.Status == 'Unknown') {
						var curTime = (new Date()).getTime();
						var delay = Math.max(updateDelayMs - (curTime - startTime), 1);
						timeoutId = setTimeout(SendRequest, delay);
					} else {
						if (uploadState.Status == 'Cancelled' || uploadState.Status == 'Rejected' || uploadState.Status == 'Failed') {
							try {
								uploadWindow.setTimeout(function() { uploadWindow.NeatUploadForm.prototype.StopUpload(uploadState.Status); }, 1);
							} catch (ex) {
								// Nothing we can do.
							}
						}
					}				
				}
			}
		}
	}
</script>
</body>
</html>
