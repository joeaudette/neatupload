<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<script type="text/javascript" src="../../NeatUpload/NeatUpload.js"></script>
    <title>Static Upload Page Example</title>
</head>
<body>
<form id="formID" action="StaticUploadHandler.ashx" method="post" enctype="multipart/form-data">
<input id="fileID" type="file" name="NeatUpload_replacedByScript-fileField" /><br />
<div id="progressID"></div><br />
<input id="uploadButtonID" type="submit" name="submit" value="Upload" />
<input id="cancelButtonID" type="submit" name="cancel" value="Cancel" />
</form>
<script type="text/javascript">
	// Generate long random string so uploads don't interfere with each other.
	// TODO: Move to NeatUpload.js
	var postBackID = Math.round(Math.random() * 1000000000);
	
	// Must be called after form element has closed.
	NeatUploadInputFileCreate("fileID", postBackID);

	// Must be called after form element has closed.
	var pb = new NeatUploadPB("progressID", postBackID, "", "500px", "100px", ["uploadButtonID"], "IsFilesToUpload()");
	NeatUploadPB.prototype.Bars["progressID"] = pb;
	var ProgressHandlerPath = "/app/Brettle.Web.NeatUpload/tests/ProgressHandler.ashx";
	var UpdateDelayMs = 1000;
	pb.Display = function() {
		var postBackID = this.UploadForm.GetPostBackID();
		var progressDiv = document.getElementById("progressID");
		var lastUpdate = new Date();
		var timeoutId = null;
		RefreshWithAjax();

		function RefreshWithAjax() {
			var startTime = (new Date()).getTime();
			var req = null;
			if (typeof (XMLHttpRequest) != 'undefined') {
				req = new XMLHttpRequest();
			} else {
				req = new ActiveXObject('MSXML2.XMLHTTP.3.0');
			}
			req.onreadystatechange = UpdateHtml;
			req.open('GET', ProgressHandlerPath + "?postBackID=" + postBackID);
			req.send(null);

			function UpdateHtml() {
				if (typeof (req) != 'undefined' && req != null && req.readyState == 4 && req.status == 200) {
					var responseText = req.responseText;
					var uploadState = eval("(" + responseText + ")");
					progressDiv.innerHTML = "<pre>" + responseText + "</pre>";
					if (uploadState.Status == 'NormalInProgress' || uploadState.Status == 'ChunkedInProgress' || uploadState.Status == 'ProcessingInProgress' || uploadState.Status == 'Unknown') {
						var curTime = (new Date()).getTime();
						var delay = Math.max(UpdateDelayMs - (curTime - startTime), 1);
						timeoutId = setTimeout(RefreshWithAjax, delay);
					}
				}
			}
		}
	}
</script>
</body>
</html>
